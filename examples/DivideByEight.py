# This example was generated by a fine-tuned Llama3-8B model

from manim import *
from manim_voiceover import VoiceoverScene
from manim_voiceover.services.azure import AzureService


class DivideByEight(VoiceoverScene):
    def construct(self):
        self.set_speech_service(
            AzureService(
                voice="en-US-AriaNeural",
                style="newscast-casual",
                global_speed=1.15
            )
        )

        # Create a pizza
        pizza = Circle(radius=2, color=ORANGE, fill_opacity=0.8)
        pizza.set_fill(ORANGE, opacity=0.8)

        # Add slices
        slices = VGroup(*[Rectangle(width=1, height=0.5, color=WHITE)
                        for _ in range(8)])
        slices.arrange(RIGHT, buff=0.2).next_to(pizza, DOWN)

        # Text labels
        slice_text = VGroup(*[Text(str(i+1), font_size=30) for i in range(8)])
        slice_text.arrange(RIGHT, buff=0.2).next_to(slices, DOWN)

        # Divide sign
        divide_sign = Text("รท", font_size=60).next_to(pizza, UP)

        # 64 and 8 texts
        sixty_four_text = Text("64", font_size=60).next_to(pizza, UP + LEFT)
        eight_text = Text("8", font_size=60).next_to(divide_sign, RIGHT)

        # Animation
        with self.voiceover(text="Hey there, math whiz!") as tracker:
            self.play(FadeIn(pizza), run_time=tracker.duration)

        with self.voiceover(text="Today, we are going to learn how to divide 64 into 8 equal parts, just like sharing a yummy pizza!") as tracker:
            self.play(FadeIn(slices), run_time=tracker.duration)
            self.play(FadeIn(slice_text), run_time=tracker.duration)

        with self.voiceover(text="This is our pizza, and we want to share it equally among 8 friends.") as tracker:
            self.play(FadeIn(divide_sign), run_time=tracker.duration)

        with self.voiceover(text="We use the divide sign to show division.") as tracker:
            self.play(FadeIn(sixty_four_text), run_time=tracker.duration)
            self.play(FadeIn(eight_text), run_time=tracker.duration)

        with self.voiceover(text="We can count how many slices we need to give each friend. Let's count together: 1, 2, 3, 4, 5, 6, 7, 8!") as tracker:
            self.play(
                slices[0].animate.set_fill(BLUE, opacity=1),
                slice_text[0].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[1].animate.set_fill(BLUE, opacity=1),
                slice_text[1].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[2].animate.set_fill(BLUE, opacity=1),
                slice_text[2].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[3].animate.set_fill(BLUE, opacity=1),
                slice_text[3].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[4].animate.set_fill(BLUE, opacity=1),
                slice_text[4].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[5].animate.set_fill(BLUE, opacity=1),
                slice_text[5].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[6].animate.set_fill(BLUE, opacity=1),
                slice_text[6].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )
            self.play(
                slices[7].animate.set_fill(BLUE, opacity=1),
                slice_text[7].animate.set_color(BLUE),
                run_time=tracker.duration / 8
            )

        with self.voiceover(text="Wow, you did it! Each friend gets 8 slices!") as tracker:
            self.play(Circumscribe(slices[0]), run_time=tracker.duration)

        with self.voiceover(text="So, 64 divided by 8 equals 8!") as tracker:
            self.play(FadeOut(slices), run_time=tracker.duration)

        self.wait()
